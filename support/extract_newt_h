#!/bin/bash

# Extract functions from newt.h
# bash > 4

if [[ $1 != *newt.h ]];then
   echo >&2  "usage: extract_newt_h /path/to/newt.h"
   exit 1
fi

readarray -t fnames < <(awk -F\( 'NF>1 && /;/ && !/^typedef/{sub(/.*newt/,"",$1);print $1}' "$1" )






declare -A first_words
for f in  "${fnames[@]}";do
    f=${f,}
    first_words["${f%%[[:upper:]]*}"]+=" ${f#${f%%[[:upper:]]*}}"
done

#if only one function, make it one word
for k in "${!first_words[@]}";do

    if [[ "${first_words[$k]}" != " "*" "* ]]; then
	if [[ ${first_words[$k]} != " " ]];then
            first_words[$k${first_words[$k]#" "}]=""
	    unset "first_words[$k]"
	fi
    fi

done

#for consistency
unset "first_words[pushHelpLine]"
first_words[push]=""

#my filter miss this one...
first_words[OpenWindow]=""

# hashing using djb2...bash version
# unsigned long
#     hash(unsigned char *str)
#     {
#         unsigned long hash = 5381;
#         int c;
#         while (c = *str++)
#             hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
#         return hash;
#     }


# # list of defines
# for k in "${!first_words[@]}";do
#     hash=5381
#     l=${k,,} # lowercase the words
#     for ((i=0;i<${#l};i+=1)); do
# 	LC_CTYPE=C printf -v c %d "'${l:i:1}"
# 	(( hash = ((hash '<<' 5) + hash)+c ))
#     done
#     printf -v hs " %ul" $hash 
#     printf "#define %-18s%-30s/* %s */\n"  "${k^^}" "${hs%l}ull" "newt${k^}"
# done | sort

# #case statements
# printf '%s\n' "${!first_words[@]}" | sort | while read -r k; do
#     printf "case %s:\n    return libnewt_%s(list->next);\n    break;\n" ${k^^} $k
# done 


#list of sub commands
for k in "${!first_words[@]}";do
    if [[ ${first_words[$k]} == *[a-z]* ]];then 
	printf "%s:%s\n" "$k" "${first_words[$k]}"
    fi
done | sort


#forms
# list of defines
for k in ${first_words[form]};do
    hash=5381
    l=${k,,} # lowercase the words
    for ((i=0;i<${#l};i+=1)); do
	LC_CTYPE=C printf -v c %d "'${l:i:1}"
	(( hash = ((hash '<<' 5) + hash)+c ))
    done
    printf -v hs " %ul" $hash 
    printf "#define %-18s%-30s/* %s */\n"  "${k^^}" "${hs%l}ull" "newtForm${k^}"
done | sort

#forward decls
printf '%s\n' ${first_words[form]} | sort | while read -r k; do
    printf "int %s(WORD_LIST *);\n" "form_${k^}"
done    
echo
echo 'int libnewt_form(WORD_LIST * list) {
  /*   lowercase the word */
  lower(&list->word->word);

  switch (hash(list->word->word)) {
'

#case statements
printf '%s\n' ${first_words[form]} | sort | while read -r k; do
    printf "    case %s:\n      return form_%s(list->next);\n      break;\n" ${k^^} $k
done 
echo '    default:
      return 127;
  } 
}'

#functemplates
printf '%s\n' ${first_words[form]} | sort | while read -r k; do
    printf "\nint %s(WORD_LIST * list){\n   return 0;\n}\n" "form_${k^}"
done    
